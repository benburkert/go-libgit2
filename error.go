package libgit2

//#include <git2.h>
import "C"

//TODO(benburkert): properly attribute this to git2go

type errorClass int

const (
	errClassNone       errorClass = C.GITERR_NONE
	errClassNoMemory   errorClass = C.GITERR_NOMEMORY
	errClassOs         errorClass = C.GITERR_OS
	errClassInvalid    errorClass = C.GITERR_INVALID
	errClassReference  errorClass = C.GITERR_REFERENCE
	errClassZlib       errorClass = C.GITERR_ZLIB
	errClassRepository errorClass = C.GITERR_REPOSITORY
	errClassConfig     errorClass = C.GITERR_CONFIG
	errClassRegex      errorClass = C.GITERR_REGEX
	errClassOdb        errorClass = C.GITERR_ODB
	errClassIndex      errorClass = C.GITERR_INDEX
	errClassObject     errorClass = C.GITERR_OBJECT
	errClassNet        errorClass = C.GITERR_NET
	errClassTag        errorClass = C.GITERR_TAG
	errClassTree       errorClass = C.GITERR_TREE
	errClassIndexer    errorClass = C.GITERR_INDEXER
	errClassSSL        errorClass = C.GITERR_SSL
	errClassSubmodule  errorClass = C.GITERR_SUBMODULE
	errClassThread     errorClass = C.GITERR_THREAD
	errClassStash      errorClass = C.GITERR_STASH
	errClassCheckout   errorClass = C.GITERR_CHECKOUT
	errClassFetchHead  errorClass = C.GITERR_FETCHHEAD
	errClassMerge      errorClass = C.GITERR_MERGE
	errClassSsh        errorClass = C.GITERR_SSH
	errClassFilter     errorClass = C.GITERR_FILTER
	errClassRevert     errorClass = C.GITERR_REVERT
	errClassCallback   errorClass = C.GITERR_CALLBACK
)

type errorCode int

const (

	// No error
	errOk errorCode = C.GIT_OK
	// Generic error
	errGeneric errorCode = C.GIT_ERROR
	// Requested object could not be found
	errNotFound errorCode = C.GIT_ENOTFOUND
	// Object exists preventing operation
	errExists errorCode = C.GIT_EEXISTS
	// More than one object matches
	errAmbigious errorCode = C.GIT_EAMBIGUOUS
	// Output buffer too short to hold data
	errBuffs errorCode = C.GIT_EBUFS
	// GIT_EUSER is a special error that is never generated by libgit2
	// code.  You can return it from a callback (e.g to stop an iteration)
	// to know that it was generated by the callback and not by libgit2.
	errUser errorCode = C.GIT_EUSER
	// Operation not allowed on bare repository
	errBareRepo errorCode = C.GIT_EBAREREPO
	// HEAD refers to branch with no commits
	errUnbornBranch errorCode = C.GIT_EUNBORNBRANCH
	// Merge in progress prevented operation
	errUnmerged errorCode = C.GIT_EUNMERGED
	// Reference was not fast-forwardable
	errNonFastForward errorCode = C.GIT_ENONFASTFORWARD
	// Name/ref spec was not in a valid format
	errInvalidSpec errorCode = C.GIT_EINVALIDSPEC
	// Merge conflicts prevented operation
	errMergeConflict errorCode = C.GIT_EMERGECONFLICT
	// Lock file prevented operation
	errLocked errorCode = C.GIT_ELOCKED
	// Reference value does not match expected
	errModified errorCode = C.GIT_EMODIFIED
	// Internal only
	errPassthrough errorCode = C.GIT_PASSTHROUGH
	// Signals end of iteration with iterator
	errIterOver errorCode = C.GIT_ITEROVER
)

type gitError struct {
	message string
	class   errorClass
	code    errorCode
}

func (e gitError) Error() string {
	return e.message
}
